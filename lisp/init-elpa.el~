(require 'package)

;;; Install into separate package dirs for each Emacs version, to prevent bytecode incompatibility
(let ((versioned-package-dir
       (expand-file-name (format "elpa-%s.%s" emacs-major-version emacs-minor-version)
                         user-emacs-directory)))
  (setq package-user-dir versioned-package-dir))


;;; Standard package repositories

(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                    (not (gnutls-available-p))))
       (proto (if no-ssl "http" "https")))
  (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
  ;; Official MELPA Mirror, in case necessary.
  ;;(add-to-list 'package-archives (cons "melpa-mirror" (concat proto "://www.mirrorservice.org/sites/melpa.org/packages/")) t)
  (if (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))
    (unless no-ssl
      ;; Force SSL for GNU ELPA
      (setcdr (assoc "gnu" package-archives) "https://elpa.gnu.org/packages/"))))

;;; On-demand installation of packages

(require 'cl-lib)

(defun require-package (package &optional min-version no-refresh)
  "Install given PACKAGE, optionally requiring MIN-VERSION.
If NO-REFRESH is non-nil, the available package lists will not be
re-downloaded in order to locate PACKAGE."
  (or (package-installed-p package min-version)
      (let* ((known (cdr (assoc package package-archive-contents)))
             (versions (mapcar #'package-desc-version known)))
        (if (cl-find-if (lambda (v) (version-list-<= min-version v)) versions)
            (package-install package)
          (if no-refresh
              (error "No version of %s >= %S is available" package min-version)
            (package-refresh-contents)
            (require-package package min-version t))))))

(defun maybe-require-package (package &optional min-version no-refresh)
  "Try to install PACKAGE, and return non-nil if successful.
In the event of failure, return nil and print a warning message.
Optionally require MIN-VERSION.  If NO-REFRESH is non-nil, the
available package lists will not be re-downloaded in order to
locate PACKAGE."
  (condition-case err
      (require-package package min-version no-refresh)
    (error
     (message "Couldn't install optional package `%s': %S" package err)
     nil)))

;;; Fire up package.el

(setq package-enable-at-startup nil)
(package-initialize)

;; package.el updates the saved version of package-selected-packages correctly only
;; after custom-file has been loaded, which is a bug. We work around this by adding
;; the required packages to package-selected-packages after startup is complete.

(defvar sanityinc/required-packages nil)

(defun sanityinc/note-selected-package (oldfun package &rest args)
  "If OLDFUN reports PACKAGE was successfully installed, note it in `sanityinc/required-packages'."
  (let ((available (apply oldfun package args)))
    (prog1 available
      (when (and available (boundp 'package-selected-packages))
        (add-to-list 'sanityinc/required-packages package)))))

(advice-add 'require-package :around 'sanityinc/note-selected-package)

(when (fboundp 'package--save-selected-packages)
  (require-package 'seq)
  (add-hook 'after-init-hook
            (lambda () (package--save-selected-packages
                   (seq-uniq (append sanityinc/required-packages package-selected-packages))))))

(require-package 'fullframe)
(fullframe list-packages quit-window)

(defun sanityinc/set-tabulated-list-column-width (col-name width)
  "Set any column with name COL-NAME to the given WIDTH."
  (when (> width (length col-name))
    (cl-loop for column across tabulated-list-format
             when (string= col-name (car column))
             do (setf (elt column 1) width))))

(defun sanityinc/maybe-widen-package-menu-columns ()
  "Widen some columns of the package menu table to avoid truncation."
  (when (boundp 'tabulated-list-format)
    (sanityinc/set-tabulated-list-column-width "Version" 13)
    (let ((longest-archive-name (apply 'max (mapcar 'length (mapcar 'car package-archives)))))
      (sanityinc/set-tabulated-list-column-width "Archive" longest-archive-name))))

(add-hook 'package-menu-mode-hook 'sanityinc/maybe-widen-package-menu-columns)

;; --------------------------------------------------------------
;; required packages
;; --------------------------------------------------------------
;; (require-package 'async)
; color-theme 6.6.1 in elpa is buggy
(require-package 'exec-path-from-shell)
;; --------------------------------------------------------------
;; language mode
;; --------------------------------------------------------------
(require-package 'gitignore-mode)
(require-package 'gitconfig-mode)
(require-package 'yaml-mode)
(require-package 'haml-mode)
(require-package 'scss-mode)
(require-package 'markdown-mode)
(require-package 'less-css-mode)
(require-package 'emmet-mode)
(require-package 'js2-mode)
(require-package 'rjsx-mode)
(require-package 'rjsx-mode)
(require-package 'web-mode)
(require-package 'adoc-mode) ; asciidoc files
(require-package 'go-mode)
;; evil packages
(require-package 'evil)
(require-package 'evil-escape)
(require-package 'evil-exchange)
(require-package 'evil-find-char-pinyin)
(require-package 'evil-iedit-state)
(require-package 'evil-mark-replace)
(require-package 'evil-matchit)
(require-package 'evil-nerd-commenter)
(require-package 'evil-surround)
(require-package 'evil-visualstar)
(require-package 'evil-lion)
(require-package 'evil-args)
(require-package 'evil-textobj-syntax)
;; search and predict
(require-package 'ivy)
(require-package 'swiper)
(require-package 'counsel) ; counsel => swiper => ivy
(require-package 'counsel-bbdb)
(require-package 'counsel-gtags)
(require-package 'counsel-css)
(require-package 'pinyinlib)
(require-package 'find-by-pinyin-dired)
(require-package 'find-file-in-project)
(require-package 'hydra)
(require-package 'ivy-hydra) ; @see https://oremacs.com/2015/07/23/ivy-multiaction/
;; @see https://github.com/abo-abo/ace-link
(require-package 'ace-link)
(require-package 'ace-mc)
(require-package 'ace-window)
(require-package 'neotree)
;; text completion with company 
;; @see http://company-mode.github.io/
(require-package 'company)
(require-package 'company-c-headers)
(require-package 'company-statistics)
;; language specific packages, differenct from modes, mostly
;; for linting and autocompletion
;; python
(require-package 'elpy)
;; golang
;; others
(require-package 'genearl)
(require-package 'smex)
(require-package 'wgrep)
(require-package 'request)
(require-package 'erlang)
(require-package 'findr)
(require-package 'jump)
(require-package 'nvm)
(require-package 'link)
(require-package 'connection)
(require-package 'htmlize)
(require-package 'diminish)
(require-package 'scratch)
(require-package 'ibuffer-vc)
(require-package 'regex-tool)
(require-package 'session)
(require-package 'unfill)
(require-package 'buffer-move)
;; C-x r l to list bookmarks
(require-package 'multi-term)
(require-package 'js-doc)
(require-package 'js2-refactor)
(require-package 's)
;; js2-refactor requires js2, dash, s, multiple-cursors, yasnippet
;; I don't use multiple-cursors, but js2-refactor requires it
(require-package 'multiple-cursors)
(require-package 'tagedit)
(require-package 'git-link)
(require-package 'yasnippet)
(require-package 'yasnippet-snippets)
(require-package 'legalese)
(require-package 'simple-httpd)
;; (require-package 'git-gutter) ; use my patched version
(require-package 'pyim)
(require-package 'dumb-jump)
(require-package 'emms)
(require-package 'iedit)
(require-package 'ace-pinyin)
(require-package 'bash-completion)
(require-package 'websocket) ; for debug debugging of browsers
(require-package 'jss)
(require-package 'undo-tree)
(require-package 'slime)
(require-package 'auto-package-update)
(require-package 'keyfreq)
(require-package 'magit) ; Magit 2.12 is the last feature release to support Emacs 24.4.
(require-package 'shackle)
(require-package 'toc-org)
(require-package 'artbollocks-mode)
(require-package 'elpa-mirror)
;; {{ @see https://pawelbx.github.io/emacs-theme-gallery/
(require-package 'color-theme)
;; emms v5.0 need seq
(require-package 'seq)
(require-package 'stripe-buffer)
(require-package 'visual-regexp) ;; Press "M-x vr-*"
(require-package 'vimrc-mode)

(provide 'init-elpa)
